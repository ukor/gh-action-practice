
name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          BEFORE_PR_SHA: ${{ github.event.before }}
          AFTER_PR_SHA: ${{ github.event.after }}
        run: |
          echo Add other actions to build,
          echo "$GITHUB_CONTEXT"
          echo "$GITHUB_WORKSPACE"

          git --no-pager log --oneline
          

          # Exit immediately if a command exits with a non-zero status.
          # set -o errexit
          
          # Treat unset variables as an error when substituting.
          # set -o nounset
          
          # The exit status of a pipeline is the status of the last command to exit with a non-zero status.
          # set -o pipefail
          
          # Declare the associative array
          declare -A changed_files
          
          # Replace these with your actual commit SHAs
          start_commit=$(git rev-parse --short "$BEFORE_PR_SHA")
          end_commit=$(git rev-parse --short "$AFTER_PR_SHA")

          echo "$start_commit" "$end_commit"

          git --version
          
          # Capture the output of git diff in a variable
          file_list=$(git --no-pager diff --name-only "$start_commit" "$end_commit")

          echo "$file_list"
          
          # Read each line from the variable and populate the array
          # -r prevents backslash escapes from being interpreted
          # -a creates an array from the input
          while read -r file_path; do
              echo "$file_path"
              if [[ -n "$file_path" ]]; then
                  # The key and value are both the file path
                  changed_files["$file_path"]="$file_path"
              fi
          done <<< "$file_list"
          
          # Optional: Print the contents of the array to verify
          echo "Files changed between $start_commit and $end_commit:"
          for file in "${!changed_files[@]}"; do
              echo "- $file"
          done
